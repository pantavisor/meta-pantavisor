From 2e18bedf257d5c85b25cc19932dba0bf6b9637f3 Mon Sep 17 00:00:00 2001
From: Alexander Sack <asac@pantacor.com>
Date: Thu, 3 Aug 2023 11:27:44 +0200
Subject: [PATCH] add new config lxc.tty.min as lower bound of tty allocation.

lxc.tty.min = 3
lxc.tty.max = 6

will make virtual tty /dev/tty3-6 available in containers
but does not touch tty1 and tty2.

---
 src/lxc/conf.c     | 11 +++++++----
 src/lxc/conf.h     |  1 +
 src/lxc/confile.c  | 35 +++++++++++++++++++++++++++++++++++
 src/lxc/start.c    |  4 ++--
 src/lxc/terminal.c |  8 ++++----
 5 files changed, 49 insertions(+), 10 deletions(-)

diff --git a/src/lxc/conf.c b/src/lxc/conf.c
index e4c1fdb43..a7115b9da 100644
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -860,7 +860,7 @@ static int lxc_setup_ttys(struct lxc_conf *conf)
 	if (!conf->rootfs.path)
 		return 0;
 
-	for (i = 0; i < ttys->max; i++) {
+	for (i = ttys->min; i < ttys->max; i++) {
 		struct lxc_terminal_info *tty = &ttys->tty[i];
 
 		ret = snprintf(path, sizeof(path), "/dev/tty%d", i + 1);
@@ -947,7 +947,10 @@ int lxc_allocate_ttys(struct lxc_conf *conf)
 	if (!ttys->tty)
 		return -ENOMEM;
 
-	for (i = 0; i < ttys->max; i++) {
+	for (i = 0; i < ttys->min; i++) {
+		memset(&ttys->tty[i], 0, sizeof(ttys->tty[i]));
+	}
+	for (i = ttys->min; i < ttys->max; i++) {
 		struct lxc_terminal_info *tty = &ttys->tty[i];
 
 		tty->master = -EBADF;
@@ -996,7 +999,7 @@ void lxc_delete_tty(struct lxc_tty_info *ttys)
 	if (!ttys->tty)
 		return;
 
-	for (i = 0; i < ttys->max; i++) {
+	for (i = ttys->min; i < ttys->max; i++) {
 		struct lxc_terminal_info *tty = &ttys->tty[i];
 
 		if (tty->master >= 0) {
@@ -1025,7 +1028,7 @@ static int lxc_send_ttys_to_parent(struct lxc_handler *handler)
 	if (ttys->max == 0)
 		return 0;
 
-	for (i = 0; i < ttys->max; i++) {
+	for (i = ttys->min; i < ttys->max; i++) {
 		int ttyfds[2];
 		struct lxc_terminal_info *tty = &ttys->tty[i];
 
diff --git a/src/lxc/conf.h b/src/lxc/conf.h
index 4aed8517b..6a37be654 100644
--- a/src/lxc/conf.h
+++ b/src/lxc/conf.h
@@ -127,6 +127,7 @@ struct id_map {
  */
 struct lxc_tty_info {
 	size_t max;
+	size_t min;
 	char *dir;
 	char *tty_names;
 	struct lxc_terminal_info *tty;
diff --git a/src/lxc/confile.c b/src/lxc/confile.c
index 8a8e5c6f5..abb0ad3f0 100644
--- a/src/lxc/confile.c
+++ b/src/lxc/confile.c
@@ -125,6 +125,7 @@ lxc_config_define(signal_reboot);
 lxc_config_define(signal_stop);
 lxc_config_define(start);
 lxc_config_define(tty_max);
+lxc_config_define(tty_min);
 lxc_config_define(tty_dir);
 lxc_config_define(uts_name);
 lxc_config_define(sysctl);
@@ -220,6 +221,7 @@ static struct lxc_config_t config_jump_table[] = {
 	{ "lxc.start.delay",               set_config_start,                       get_config_start,                       clr_config_start,                     },
 	{ "lxc.start.order",               set_config_start,                       get_config_start,                       clr_config_start,                     },
 	{ "lxc.tty.dir",                   set_config_tty_dir,                     get_config_tty_dir,                     clr_config_tty_dir,                   },
+	{ "lxc.tty.min",                   set_config_tty_min,                     get_config_tty_min,                     clr_config_tty_min,                   },
 	{ "lxc.tty.max",                   set_config_tty_max,                     get_config_tty_max,                     clr_config_tty_max,                   },
 	{ "lxc.uts.name",                  set_config_uts_name,                    get_config_uts_name,                    clr_config_uts_name,                  },
 	{ "lxc.sysctl",                    set_config_sysctl,                      get_config_sysctl,                      clr_config_sysctl,                    },
@@ -1035,6 +1037,26 @@ on_error:
 	return -1;
 }
 
+static int set_config_tty_min(const char *key, const char *value,
+			      struct lxc_conf *lxc_conf, void *data)
+{
+	int ret;
+	unsigned int nbtty = 0;
+
+	if (lxc_config_value_empty(value)) {
+		lxc_conf->ttys.min = 0;
+		return 0;
+	}
+
+	ret = lxc_safe_uint(value, &nbtty);
+	if (ret < 0)
+		return -1;
+
+	lxc_conf->ttys.min = nbtty;
+
+	return 0;
+}
+
 static int set_config_tty_max(const char *key, const char *value,
 			      struct lxc_conf *lxc_conf, void *data)
 {
@@ -2996,6 +3018,12 @@ static int get_config_pty_max(const char *key, char *retv, int inlen,
 	return lxc_get_conf_size_t(c, retv, inlen, c->pty_max);
 }
 
+static int get_config_tty_min(const char *key, char *retv, int inlen,
+			      struct lxc_conf *c, void *data)
+{
+	return lxc_get_conf_size_t(c, retv, inlen, c->ttys.min);
+}
+
 static int get_config_tty_max(const char *key, char *retv, int inlen,
 			      struct lxc_conf *c, void *data)
 {
@@ -3778,6 +3806,13 @@ static inline int clr_config_pty_max(const char *key, struct lxc_conf *c,
 	return 0;
 }
 
+static inline int clr_config_tty_min(const char *key, struct lxc_conf *c,
+				     void *data)
+{
+	c->ttys.tty = 0;
+	return 0;
+}
+
 static inline int clr_config_tty_max(const char *key, struct lxc_conf *c,
 				     void *data)
 {
diff --git a/src/lxc/start.c b/src/lxc/start.c
index e530a44a9..c601cee2c 100644
--- a/src/lxc/start.c
+++ b/src/lxc/start.c
@@ -1494,11 +1494,11 @@ static int lxc_recv_ttys_from_child(struct lxc_handler *handler)
 	if (!conf->ttys.max)
 		return 0;
 
-	ttys->tty = malloc(sizeof(*ttys->tty) * ttys->max);
+	ttys->tty = calloc(ttys->max, sizeof(*ttys->tty));
 	if (!ttys->tty)
 		return -1;
 
-	for (i = 0; i < conf->ttys.max; i++) {
+	for (i = conf->ttys.min; i < conf->ttys.max; i++) {
 		int ttyfds[2];
 
 		ret = lxc_abstract_unix_recv_fds(sock, ttyfds, 2, NULL, 0);
diff --git a/src/lxc/terminal.c b/src/lxc/terminal.c
index 26b2d50d7..9a44d2377 100644
--- a/src/lxc/terminal.c
+++ b/src/lxc/terminal.c
@@ -590,7 +590,7 @@ int lxc_terminal_allocate(struct lxc_conf *conf, int sockfd, int *ttyreq)
 	}
 
 	if (*ttyreq > 0) {
-		if (*ttyreq > ttys->max)
+		if (*ttyreq < ttys->min || *ttyreq > ttys->max)
 			goto out;
 
 		if (ttys->tty[*ttyreq - 1].busy >= 0)
@@ -602,12 +602,12 @@ int lxc_terminal_allocate(struct lxc_conf *conf, int sockfd, int *ttyreq)
 	}
 
 	/* Search for next available tty, fixup index tty1 => [0]. */
-	for (ttynum = 1; ttynum <= ttys->max && ttys->tty[ttynum - 1].busy >= 0; ttynum++) {
+	for (ttynum = ttys->min + 1; ttynum <= ttys->max && ttys->tty[ttynum - 1].busy >= 0; ttynum++) {
 		;
 	}
 
 	/* We didn't find any available slot for tty. */
-	if (ttynum > ttys->max)
+	if (ttynum < ttys->min || ttynum > ttys->max)
 		goto out;
 
 	*ttyreq = ttynum;
@@ -626,7 +626,7 @@ void lxc_terminal_free(struct lxc_conf *conf, int fd)
 	struct lxc_tty_info *ttys = &conf->ttys;
 	struct lxc_terminal *terminal = &conf->console;
 
-	for (i = 0; i < ttys->max; i++)
+	for (i = ttys->min; i < ttys->max; i++)
 		if (ttys->tty[i].busy == fd)
 			ttys->tty[i].busy = -1;
 
