echo "Pantavisor Starts"

if test -z "$pv_platargs"; then
	setenv pv_platargs "earlyprintk"
fi
setenv pv_baseargs "root=/dev/ram rootfstype=ramfs rdinit=/usr/bin/pantavisor"
setenv pv_ctrl 2
if test -z "${devtype}"; then
	setenv devtype mmc
fi
setenv envloadaddr ${loadaddr}
i
pv_mmcdev=${devnum}
if test -z "${pv_mmcdev}"; then
	pv_mmcdev=${mmcdev}
fi

if test ! -z "${console}" && test ! -z "${baudrate}"; then
	setenv pv_baseargs ${pv_baseargs} console=${console},${baudrate}
fi

if test -z "${pv_mmcdev}"; then
	pv_mmcdev=1
fi

pv_bootpart=${distro_bootpart}

if test -z "${pv_bootpart}"; then
	pv_bootpart=${mmcpart}
fi

if test -z "${pv_bootpart}"; then
	pv_bootpart=1
fi

if test -z "${ramdisk_addr_r}"; then
	ramdisk_addr_r=${initrd_addr}
fi

if test -z "${addr_fit}"; then
	addr_fit=${kernel_comp_addr_r}
fi

if test -z "${addr_fit}"; then
	addr_fit=${kernel_addr_r}
fi

if test -z "${fdt_addr_r}"; then
	fdt_addr_r=$fdt_addr
fi

echo Trying to load oemEnv.txt
if load ${devtype} ${pv_mmcdev}:${pv_bootpart} ${envloadaddr} oemEnv.txt; then
	echo Importing oemEnv.txt ...
	env import ${envloadaddr} ${filesize}
fi

echo part size ${devtype} ${pv_mmcdev} ${pv_ctrl} pv_config_size
part size ${devtype} ${pv_mmcdev} ${pv_ctrl} pv_config_size
if test "${pv_config_size}" = "800"; then
	echo Found PV OEM Config at ${devtype} ${pv_mmcdev}:2
	part start ${devtype} ${pv_mmcdev} ${pv_ctrl} pv_config_start
	${devtype} read ${envloadaddr} ${pv_config_start} ${pv_config_size}
	env import ${envloadaddr} 0x1000
	setexpr pv_mmcdata ${pv_ctrl} + 1
else
	setexpr pv_mmcdata ${pv_bootpart} + 1
	if part size ${devtype} ${pv_mmcdev} ${pv_mmcdata}; then
		echo pv_mmcdata: ${pv_mmcdata}
	else
		echo pv_mmcdata: ${pv_bootpart}
		setenv pv_mmcdata ${pv_bootpart}
	fi
fi

echo "${devtype} root selected = ${pv_mmcdev}:${pv_mmcdata}"

echo Loading uboot.txt
echo load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${envloadaddr} /boot/uboot.txt; setenv uboot_txt_size ${filesize}
load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${envloadaddr} /boot/uboot.txt; setenv uboot_txt_size ${filesize}

echo Loading pantavisor uboot.txt
setenv pv_try; env import ${envloadaddr} ${uboot_txt_size}

load ${devtype} ${pv_mmcdev}:${pv_bootpart} ${envloadaddr} pv.env; setenv pv_env_size ${filesize}
echo Loading pv.env
setenv pv_trying; env import ${envloadaddr} ${pv_env_size}

echo
if env exists pv_try; then
	if env exists pv_trying && test ${pv_trying} = ${pv_try}; then
		echo Pantavisor boots checkpoint revision ${pv_rev} after failed try-boot of revision: ${pv_try}
		setenv pv_trying
		env export ${envloadaddr} pv_trying; setenv pv_env_size ${filesize};
		save ${devtype} ${pv_mmcdev}:${pv_bootpart} ${envloadaddr} pv.env ${pv_env_size}
		setenv boot_rev ${pv_rev}
	else
		echo Pantavisor boots try-boot revision: ${pv_try}
		setenv pv_trying ${pv_try}
		env export ${envloadaddr} pv_trying; setenv pv_env_size ${filesize};
		save ${devtype} ${pv_mmcdev}:${pv_bootpart} ${envloadaddr} pv.env ${pv_env_size}
		setenv boot_rev ${pv_trying}
	fi
else
	echo Pantavisor boots revision: ${pv_rev}
	setenv boot_rev ${pv_rev}
fi

echo "Trying to load fit: load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${addr_fit} /trails/${boot_rev}/bsp/pantavisor.fit"

if test -z "${fdtfile}"; then
	setenv fdtfile ${fdt_file}
fi

if test -n "${addr_fit}" && load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${addr_fit} /trails/${boot_rev}/bsp/pantavisor.fit; then
	echo Successfully loaded pantavisor.fit. booting...
	iminfo ${addr_fit}
	# first allow platforms to do their job to set name_fit_config
	if test -z "${name_fit_config}" -a -n "${pv_plat_set_name_fit_config}"; then
		run pv_plat_set_name_fit_config
	else
		# otherwise lets try the "generic" way we saw on TI and VAR
		if test -z "${name_fit_config}" -a -n "${findfdt}"; then
			run findfdt
	        fi
		if test -z "${name_fit_config}" -a -n "${fdtfile}"; then
			echo "setexpr name_fit_config gsub / _ conf-${fdtfile}"
			setexpr name_fit_config gsub / _ "#conf-${fdtfile}"
		fi
		if test -z "${name_fit_config}" -a -n "${fdtfile}"; then
			echo "setenv name_fit_config conf-${fdtfile}"
			setenv name_fit_config "#conf-${fdtfile}"
	        fi
	fi

	echo Pantavisor bootargs: "${pv_platargs} ${pv_baseargs} pv_try=${pv_try} pv_rev=${boot_rev} panic=2 ${fdtbootargs} ${configargs} ${oemargs} ${localargs}"
	setenv bootargs "${pv_platargs} ${pv_baseargs} pv_try=${pv_try} pv_rev=${boot_rev} panic=2 pv_quickboot ${fdtbootargs} ${configargs} ${oemargs} ${localargs}"

	echo "bootm ${addr_fit}${name_fit_config}"
	bootm ${addr_fit}${name_fit_config}
	echo "trying fallback: bootm ${addr_fit}"
	bootm ${addr_fit}${name_fit_config}
	echo "failed to boot fit config ${addr_fit}${name_fit_config} ... resetting in 5"
	sleep 5
	reset
else
	echo "Failed to load fit ... trying other formats..."
fi

if test -z "${kernel_addr_r}"; then
	kernel_addr_r=${loadaddr}
fi

echo Pantavisor kernel load: load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${kernel_addr_r} /trails/${boot_rev}/.pv/pv-kernel.img
load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${kernel_addr_r} /trails/${boot_rev}/.pv/pv-kernel.img

if test -z "${ramdisk_addr_r}"; then
        setexpr fsmod ${filesize} % 512
        setexpr fsoff 512 - ${fsmod}
        setexpr fsoff ${fsoff} + 512
        setexpr fsoff ${filesize} + ${fsoff}
	setexpr ramdisk_addr_r ${kernel_addr_r} + ${fsoff}
	echo "cannot find place to load ramdisk in ramdisk_addr_r ... auto calculated ${ramdisk_addr_r}"
fi

echo Pantavisor initrd load: load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${ramdisk_addr_r} /trails/${boot_rev}/.pv/pv-initrd.img
load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${ramdisk_addr_r} /trails/${boot_rev}/.pv/pv-initrd.img

setenv rd_size ${filesize}
setexpr rd_offset ${ramdisk_addr_r} + ${rd_size}

if test -z "${fdt_addr_r}"; then
	setexpr fsmod ${rd_offset} % 512
	setexpr fsoff 512 - ${fsmod}
	setexpr fsoff ${fsoff} + 512
	setexpr fsoff ${rd_offset} + ${fsoff}
	setexpr fdt_addr_r ${fsoff}
fi
echo "Copy uboot fdt to ${fdt_addr_r}"
fdt addr $fdtcontroladdr
echo "getting header totalsize ${fdt_addr_r}"
fdt headers get tsize totalsize
echo "moving fdt to ${fdt_addr_r}"
fdt move $fdtcontroladdr $fdt_addr_r $tsize

echo "Pantavisor loading FDT at ${fdt_addr_r}"
echo "load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${fdt_addr_r} /trails/${boot_rev}/.pv/pv-fdt.dtb"
if load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${fdt_addr_r} /trails/${boot_rev}/.pv/pv-fdt.dtb; then
	echo "Successfully loaded pv-fdt.dtb"
else
	if load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${fdt_addr_r} /trails/${boot_rev}/bsp/${fdtfile}; then
		echo "successfully loaded fdt directly"
	else
		echo "failed to load fdt trying to copy fdt_addr_r for booting ..."
	fi
fi

# if we ares still bullish about fdt loading lets get chosen bootargs
if test -n "${fdt_addr_r}"; then
	fdt addr ${fdt_addr_r}
	fdt get value fdtbootargs /chosen bootargs
	echo "loaded chosen bootargs - $fdtbootargs"
fi

setenv i 0
while load ${devtype} ${pv_mmcdev}:${pv_mmcdata} ${rd_offset} /trails/${boot_rev}/.pv/pv-initrd.img.${i}; do
	echo Pantavisor initrd addon loaded: load ${devtype} ${mmcdev}:${mmcdata} ${rd_offset} /trails/${boot_rev}/.pv/pv-initrd.img.${i}
	setexpr i ${i} + 1
	setexpr rd_size ${rd_size} + ${filesize}
	setexpr rd_offset ${rd_offset} + ${filesize}
done

echo Pantavisor bootargs: "${pv_platargs} ${pv_baseargs} pv_try=${pv_try} pv_rev=${boot_rev} panic=2 ${fdtbootargs} ${configargs} ${oemargs} ${localargs}"
setenv bootargs "${pv_platargs} ${pv_baseargs} pv_try=${pv_try} pv_rev=${boot_rev} panic=2 pv_quickboot ${fdtbootargs} ${configargs} ${oemargs} ${localargs}"

echo "Pantavisor go... : booti ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}"
booti ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}
echo "Pantavisor go... : bootz ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}"
bootz ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}
echo "Pantavisor go... : bootm ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}"
bootm ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}
echo "Pantavisor go... : bootelf ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}"
bootelf ${kernel_addr_r} ${ramdisk_addr_r}:${rd_size} ${fdt_addr_r}
echo "Failed to boot step, rebooting"; sleep 5; reset

